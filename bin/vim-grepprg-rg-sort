# vim:tw=0:ts=2:sw=2:et:norl:ft=bash:nospell

# YOU: Set max columns nonzero to omit long lines, which can make (in this
#      author's opinion) it more tedious to scan the quickfix results).
#  DUBS_VIM_RG_MAX_COLS=0
DUBS_VIM_RG_MAX_COLS=200

# For a discussion of the ``rg`` the options below, see:
#
#   dubs_grep_steady/plugins/dubs_grep_steady.vim::SetGrepprgRg

# For a discussion of the ``sort`` options, let me explain!
#
# - The RipGrep results are of the form: /path/to/file:linenumber:matching text
#
#   E.g.,
#
#     vim-grepprg-rg-sort:10:	# - The RipGrep results are of the form: ...
#
# - Tell ``sort`` to sort alphabetically by filename, then numerically by line.
#
#   Options we use:
#
#     -t     --field-separator=SEP
#
#              For sorting by fields.
#
#              ``-t:`` means we split the line on colons.
#
#     -k      --key=KEYDEF
#
#              Says ``man``:
#
#             "KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop
#              position, where F is a field number and C a character
#              position in the field; both are origin 1, and the stop
#              position defaults to the line's end.
#
#             "OPTS is one or more single-letter ordering options
#              [bdfgiMhnRrV], which override global ordering options for
#              that key. If no key is given, use the entire line as the
#              key."
#
#     So... ``-k1,1`` means we sort first by first field (filename).
#
#              (NOTE: Don't do just ``-k1``, or ``sort`` walks to end of string.)
#
#    and... ``-k2,2n`` uses the second field to sort further, if necessary.
#              The ``n`` is ``--numeric-sort``, giving the numbers a true sort.
#
#     --debug  "Use --debug to diagnose incorrect key usage."
#
#              (lb): Very Helpful!! E.g.,
#
#                 rg ... \
#
#                  | sort --debug -t: -k1,1 -k2,2n

# Resolve path to `rg`, so that we don't inadvertently call user's `rg`
# alias (e.g., user aliases `rg` to `tag`, for interactive CLI results).
rip_grep_executable () {
  type -P rg
}

must_verify_rip_grep () {
  rip_grep_executable > /dev/null \
    && return

  echo "\
ERROR: Cound not find RipGrep!
- CXREF: Check rip_grep_executable:
    $0"

  exit 1
}

expand_paths () {
  awk -F: '
    {
      "realpath \"" $1 "\"" | getline abs_path;
      printf "%s:", abs_path;
      for (col = 2; col < NF; col++) printf "%s:", $col;
      print $NF
    }
  '
}

# [lb] 2019-01-06: BEWARE: I don't remember a findup feature, but there's one!
#   --no-ignore-parent  # Walks up tree honoring .ignore files.
# The only issue is that when files are ignored, and you want to track down the
# .ignore file responsible, you need to remember to walk up from all search paths.
rip_grep_sleep_repeat () {
  $(rip_grep_executable) \
    -A 0 \
    -B 0 \
    --hidden \
    --follow \
    --no-ignore-vcs \
    --line-number \
    --no-heading \
    --with-filename \
    --max-columns ${DUBS_VIM_RG_MAX_COLS} \
    --glob '!.git/' \
    "$@" \
    | expand_paths \
    | sort -t: -k1,1 -k2,2n
}

main () {
  must_verify_rip_grep

  rip_grep_sleep_repeat "$@"
}

main "$@"

